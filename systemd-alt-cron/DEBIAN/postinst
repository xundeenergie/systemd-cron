#!/bin/sh



# postinst script for webpy-example
#
# see: dh_installdeb(1)

#_DEB_SYSTEMD_HELPER_DEBUG=1

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# source debconf library
#. /usr/share/debconf/confmodule

# For user-services only, for earch target an extra section! for system-services user deb-systemd*
# put in full unit-name. for example "mkbackup@hourly.service"


case "$1" in

    configure)
        SERVICES=""
        ;;
    abort-upgrade|abort-remove|abort-deconfigure)
        exit 0
        ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
        ;;

esac

# normal systemd-units
SERVICES=""
for s in $SERVICES; do
    deb-systemd-helper-new unmask $s >/dev/null || true
    if deb-systemd-helper-new --quiet was-enabled $s; then
            # Enables the unit on first installation, creates new
            # symlinks on upgrades if the unit file has changed.
            deb-systemd-helper-new enable $s >/dev/null || true
    else
            # Update the statefile to add new symlinks (if any), which need to be
            # cleaned up on purge. Also remove old symlinks.
            deb-systemd-helper-new update-state $s >/dev/null || true
    fi
done

# instantiated systemd-units

#DEVICE=$(awk '$9 == "btrfs" && $5 == "/" {gsub("/dev/","",$10);print $10}' /proc/self/mountinfo)
#ROT=$(cat /sys/block/$(printf '%s' "$DEVICE" | sed 's/[0-9]//g')/queue/rotational > /dev/null 2>&1 || exit 1)
#if test $ROT -eq 0; then
#    INTERVALS="afterboot aptupgrade cleanup daily dmin hourly manually minute monthly plugin weekly yearly"
#else
#    INTERVALS="afterboot aptupgrade cleanup daily dmin hourly manually minute monthly plugin weekly yearly"
#fi
INTERVALS="afterboot aptupgrade cleanup daily dmin hourly manually minute monthly plugin weekly yearly"
CINT=$(for i in $INTERVALS;do echo "timer-${i}.timer" ; done)
SERVICES="timer-xe.target $CINT"

for s in $SERVICES; do
    #deb-systemd-helper-new-xe unmask $s >/dev/null || true
    deb-systemd-helper-new unmask $s || true
    # was-enabled defaults to true, so new installations run enable.
    #echo "enable $s"
    if deb-systemd-helper-new --quiet was-enabled $s; then
            # Enables the unit on first installation, creates new
            # symlinks on upgrades if the unit file has changed.
            deb-systemd-helper-new enable $s >/dev/null || true
    else
            # Update the statefile to add new symlinks (if any), which need to be
            # cleaned up on purge. Also remove old symlinks.
            deb-systemd-helper-new update-state $s >/dev/null || true
    fi
done

exit 0


